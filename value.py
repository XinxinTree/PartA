# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eHZ-iYB2cKLyi_DIf2a4jt2eFRhVFfum
"""

import pandas as pd
import numpy as np
import re
import sys
from tqdm.auto import tqdm

def read_input(file_name):
  with open(file_name, 'r') as file:
    s2 = file.read().replace('\n', '')
  return s2

def read_table(table_name):
  data = pd.read_csv(table_name)
  return data

def pre_processing_table(data, col_name ='mutation'):
  pre_table = data
  pre_table[col_name] = pre_table[col_name].str.replace(r'[A-Za-z](?=\d)', '', regex=True)
  return pre_table

def split_string(string, p2_size=14, p1_size=16, core_size=7):

  #start index
  p2 = string[:p2_size]
  core = string[p2_size:p2_size+core_size]
  p1 = string[p2_size+core_size:]

  return p1, p2, core

def mutation_recording(string, idx = 11, core_size = 7, p2_size = 14, wt_type = 'GTTGAAG'):
  mutations = []

  for i in range(core_size):
    l = string[i+p2_size]
    wt_l = wt_type[i]

    if l != wt_l:
      mut = str(i+idx) + l
      mutations.append(mut)

  return mutations

def mutation_string(mutations_array):

  mut_str = ''
  for i in range(len(mutations_array)):

    if i == (len(mutations_array)-1):
      mut_str += mutations_array[i]
    else:
      mut_str += mutations_array[i] + ' '

  return mut_str

def mutation_tmp_table(mut_string, table_name = 'mutation_table.csv', mutation_column = 'mutation'):

  mutation_table = read_table(table_name)
  mutation_table = pre_processing_table(mutation_table)
  # mut_string = mutation_string(mutations_array)

  mutation_tmp = mutation_table[mutation_table[mutation_column].str.contains(mut_string)]

  return mutation_tmp

def mut_activiry(mutation_tmp, mut_string, mu_col = 'mutation', acti_col = 'Relative Activity'):

  sample_list = []
  for index, row in mutation_tmp.iterrows():
    mutations = row['mutation']
    activity = row['Relative Activity']

    str_tmp = mutations.replace(mut_string, '')
    str_n = re.sub(r'[^0-9]', ' ', str_tmp)
    num = str_n.split()

    save_b = True
    for i in num:
      if int(i) > 10:
        save_b = False

    if save_b:
      sample_info = {'mutation': mutations, 'activity': activity}
      sample_list.append(sample_info)

  if len(sample_list) > 0:
    max_dict = max(sample_list, key=lambda x: x['activity'])
  else:
    return

  return max_dict

#get the position
def get_position(max_dict, mu_col_name = 'mutation'):

  mutation_string = str(max_dict[mu_col_name])
  matches = re.findall(r'(\d+)', mutation_string)
  position = [int(match) for match in matches]
  mutationTo = re.findall(r'\d([A-Za-z])', mutation_string)
  result_list = [{'position': pos, 'mutation': mut} for pos, mut in zip(position, mutationTo)]

  return result_list

def reverse_string(string_in):
  s1_string = ''.join(string_in[::-1])
  return s1_string

def s1_core(mut_pos, s1_wt_type = 'TAGTTGAGCT'):

  s1_string = s1_wt_type
  for i in mut_pos:
    position = i['position']
    mutation = i['mutation']
    if position < len(s1_wt_type):
      s1_string = s1_string[:position-1] + mutation + s1_string[position:]

  return s1_string

def s1_p1(p1, p1_size = 16):

  s1_p1_string = ''
  for j in range(len(p1)):
    if p1[j] == 'C':
      s1_p1_string += 'G'
    if p1[j] == 'A':
      s1_p1_string += 'T'
    if p1[j] == 'G':
      s1_p1_string += 'C'
    if p1[j] == 'T':
      s1_p1_string += 'A'

  return s1_p1_string

def s1_p2(p2, p2_size = 14):

  s1_p2_string = ''
  for j in range(len(p2)):
    if p2[j] == 'C':
      s1_p2_string += 'G'
    if p2[j] == 'A':
      s1_p2_string += 'T'
    if p2[j] == 'G':
      s1_p2_string += 'C'
    if p2[j] == 'T':
      s1_p2_string += 'A'

  return s1_p2_string

def s1_sequence(string, mut_pos, wild_t = False):
  p1, p2, _ = split_string(string)
  s1_p1_string = s1_p1(p1)
  s1_p2_string = s1_p2(p2)
  p1_string = reverse_string(s1_p1_string)
  p2_string = reverse_string(s1_p2_string)

  if wild_t:
    s1_se = p1_string+'TAGTTGAGCT'+p2_string
  else:
    s1_core_string = s1_core(mut_pos)
    s1_se = p1_string+s1_core_string+p2_string

  return s1_se

def modify_s2(idx_arr, activity_arr, s2):
  long_string = s2
  positions_to_insert = np.array(idx_arr) + 19

  cumulative_len = 0
  for i, (pos, activity) in enumerate(zip(positions_to_insert, activity_arr)):
      adjusted_pos = pos + i + cumulative_len
      cumulative_len += len(f"({activity:.3f})")
      long_string = long_string[:adjusted_pos] + f"|({activity:.3f})" + long_string[adjusted_pos:]

  return long_string

window_size = 37
s2 = read_input('input_sequence.txt')
idx_arr = []
s2_arr = []
s1_arr = []
activity_arr = []
for i in tqdm(range(0, len(s2) - window_size + 1, 1)):
    window_string = s2[i:i+window_size]

    #get the mutation and activity value
    if ((window_string[13] == 'C') or (window_string[13] == 'G')) and ((window_string[14+7] == 'C') or (window_string[14+7] == 'G')):
      mutation_arr = mutation_recording(window_string)
      mutationStr = mutation_string(mutation_arr)
      muta_table = mutation_tmp_table(mutationStr)

      if len(muta_table) > 0:
        if len(mutationStr) == 0:
          s1_string = s1_sequence(window_string, [], wild_t = True)
          idx_arr.append(i)
          s2_arr.append(window_string)
          s1_arr.append(s1_string)
          activity_arr.append(1)

        else:
          max_activity_dic = mut_activiry(muta_table, mutationStr)
          if max_activity_dic != None:
            #get s1 sequence array
            position_mut_dic = get_position(max_activity_dic)
            s1_string = s1_sequence(window_string, position_mut_dic)
            idx_arr.append(i)
            s2_arr.append(window_string)
            s1_arr.append(s1_string)
            activity_arr.append(max_activity_dic['activity'])

def main():

    if len(idx_arr) == 0:
        with open('output.txt', 'w') as output_file:
            output_file.write("The input sequence does not have a matching mutation and activity value in the mutation table.")
    else:
      s2_sequence = modify_s2(idx_arr, activity_arr, s2)
      print("\nResults of I-R3 Analysis\n")
      print("I.  Substrate: ", s2_sequence, "\n")

      with open('output.txt', 'w') as output_file:
        output_file.write("\nResults of I-R3 Analysis\n")
        output_file.write("\nI.  Substrate: " + s2_sequence + "\n")

        dzyme_results = []

        for cut_site, dzyme, activity, s2Seq in zip(idx_arr, s1_arr, activity_arr, s2_arr):
            p1, p2, core = split_string(s2Seq)
            p2_s1, p1_s1, core_s1 = split_string(dzyme, p2_size=16, p1_size=14, core_size=10)
            substrate = "5'-" + p2 + "-" + core + "-" + p1 + "-3'"
            dzym = "5'-" + p1_s1 + "-" + core_s1 + "-" + p2_s1 + "-3'"
            result = {
                "cut_site": cut_site + 19,
                "dzyme": dzym,
                "substrate": substrate,
                "activity": activity,
            }
            dzyme_results.append(result)

        print("II. D-zyme Designs & Targets\n")
        output_file.write("\nII. D-zyme Designs & Targets\n")
        for i, result in enumerate(dzyme_results, start=1):
            cut_site = result["cut_site"]
            dzyme = result["dzyme"]
            substrate = result["substrate"]
            activity = result["activity"]

            print(f"#{i}.  Cut-site: {cut_site:05},  D-zyme: {dzyme},  Substrate: {substrate}, relative-activity: {activity:.3f}.")


            output_file.write(
                f"#{i}.  Cut-site: {cut_site:05},  D-zyme: {dzyme},  Substrate: {substrate}, relative-activity: {activity:.3f}.\n"
            )


if __name__ == "__main__":
      main()

